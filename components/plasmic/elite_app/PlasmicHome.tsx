/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oxjwf2M1EC3o9H5JxPQ3KW
// Component: UHmK5TAFGD_a

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: XB6I-Pr5xY0M/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantszpQcsLHdE9Ki } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ZpQcsLHdE9KI/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oxjwf2M1EC3o9H5JxPQ3KW/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: UHmK5TAFGD_a/css

import ChevronDown2Icon from "./icons/PlasmicIcon__ChevronDown2"; // plasmic-import: x1JnpClkMqxX/icon

createPlasmicElementProxy;

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: Flex__<"div">;
  eiteHomeLayout?: Flex__<typeof PageLayout>;
  section?: Flex__<"section">;
  mainContent?: Flex__<"div">;
  topbar3?: Flex__<"div">;
  container?: Flex__<"div">;
  textInput?: Flex__<"div">;
  typeYourMessage?: Flex__<"div">;
  column?: Flex__<"div">;
  navLink?: Flex__<"div">;
  profile?: Flex__<"div">;
  text?: Flex__<"div">;
  svg?: Flex__<"svg">;
  header?: Flex__<"div">;
  h1?: Flex__<"h1">;
  content?: Flex__<"div">;
  column2?: Flex__<"div">;
  clickAndPasteMainContent?: Flex__<"div">;
  column3?: Flex__<"div">;
  clickAndPasteSecondaryContent?: Flex__<"div">;
  clickAndPasteMainContent2?: Flex__<"div">;
};

export interface DefaultHomeProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "nJ4mXNnQsZ2fYHu7eCEe5q",
        opId: "7f0774c9-65f7-48d9-9bd8-9ed737063ab8",
        userArgs: {},
        cacheKey: `plasmic.$.7f0774c9-65f7-48d9-9bd8-9ed737063ab8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    recordingsQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "nJ4mXNnQsZ2fYHu7eCEe5q",
        opId: "5c350ebf-0bbe-42cd-9aa0-877cb4e191e2",
        userArgs: {},
        cacheKey: `plasmic.$.5c350ebf-0bbe-42cd-9aa0-877cb4e191e2.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszpQcsLHdE9Ki()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"eiteHomeLayout"}
            data-plasmic-override={overrides.eiteHomeLayout}
            className={classNames("__wab_instance", sty.eiteHomeLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <div
                    data-plasmic-name={"mainContent"}
                    data-plasmic-override={overrides.mainContent}
                    className={classNames(projectcss.all, sty.mainContent)}
                  >
                    <div
                      data-plasmic-name={"topbar3"}
                      data-plasmic-override={overrides.topbar3}
                      className={classNames(projectcss.all, sty.topbar3)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"container"}
                        data-plasmic-override={overrides.container}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.container)}
                      >
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"textInput"}
                          data-plasmic-override={overrides.textInput}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.textInput)}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__gnzJ)}
                            displayHeight={"24px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"24px"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/elite_app/images/iconSearch.svg",
                              fullWidth: 24,
                              fullHeight: 24,
                              aspectRatio: 1
                            }}
                          />

                          <div
                            data-plasmic-name={"typeYourMessage"}
                            data-plasmic-override={overrides.typeYourMessage}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.typeYourMessage
                            )}
                          >
                            {"Search"}
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"column"}
                          data-plasmic-override={overrides.column}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.column)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"navLink"}
                            data-plasmic-override={overrides.navLink}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.navLink)}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__hjdJa)}
                              displayHeight={"24px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"24px"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/elite_app/images/iconBell.svg",
                                fullWidth: 24,
                                fullHeight: 24,
                                aspectRatio: 1
                              }}
                            />
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"profile"}
                            data-plasmic-override={overrides.profile}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.profile)}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__lgJlL)}
                              displayHeight={"40px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"40px"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/elite_app/images/avatarImage.svg",
                                fullWidth: 40,
                                fullHeight: 40,
                                aspectRatio: 1
                              }}
                            />

                            <div
                              data-plasmic-name={"text"}
                              data-plasmic-override={overrides.text}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text
                              )}
                            >
                              {"Nick Greenberg"}
                            </div>
                            <ChevronDown2Icon
                              data-plasmic-name={"svg"}
                              data-plasmic-override={overrides.svg}
                              className={classNames(projectcss.all, sty.svg)}
                              role={"img"}
                            />
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      data-plasmic-name={"header"}
                      data-plasmic-override={overrides.header}
                      className={classNames(projectcss.all, sty.header)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-imtWo6tcYhfH)" }}
                          >
                            {"Home"}
                          </span>
                        </React.Fragment>
                      </h1>
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"content"}
                      data-plasmic-override={overrides.content}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.content)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"column2"}
                        data-plasmic-override={overrides.column2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.column2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nv4Ht
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___0Jk7P
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__q9D1G
                              )}
                            >
                              {"Click and paste Main Content"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"clickAndPasteMainContent"}
                            data-plasmic-override={
                              overrides.clickAndPasteMainContent
                            }
                            className={classNames(
                              projectcss.all,
                              sty.clickAndPasteMainContent
                            )}
                          />
                        </div>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"column3"}
                        data-plasmic-override={overrides.column3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.column3)}
                      >
                        <div
                          data-plasmic-name={"clickAndPasteSecondaryContent"}
                          data-plasmic-override={
                            overrides.clickAndPasteSecondaryContent
                          }
                          className={classNames(
                            projectcss.all,
                            sty.clickAndPasteSecondaryContent
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__j3NmP
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8TOut
                              )}
                            >
                              {"Click and paste Secondary Content"}
                            </div>
                          </div>
                          <div
                            data-plasmic-name={"clickAndPasteMainContent2"}
                            data-plasmic-override={
                              overrides.clickAndPasteMainContent2
                            }
                            className={classNames(
                              projectcss.all,
                              sty.clickAndPasteMainContent2
                            )}
                          />
                        </div>
                      </Stack__>
                    </Stack__>
                  </div>
                </section>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "eiteHomeLayout",
    "section",
    "mainContent",
    "topbar3",
    "container",
    "textInput",
    "typeYourMessage",
    "column",
    "navLink",
    "profile",
    "text",
    "svg",
    "header",
    "h1",
    "content",
    "column2",
    "clickAndPasteMainContent",
    "column3",
    "clickAndPasteSecondaryContent",
    "clickAndPasteMainContent2"
  ],
  eiteHomeLayout: [
    "eiteHomeLayout",
    "section",
    "mainContent",
    "topbar3",
    "container",
    "textInput",
    "typeYourMessage",
    "column",
    "navLink",
    "profile",
    "text",
    "svg",
    "header",
    "h1",
    "content",
    "column2",
    "clickAndPasteMainContent",
    "column3",
    "clickAndPasteSecondaryContent",
    "clickAndPasteMainContent2"
  ],
  section: [
    "section",
    "mainContent",
    "topbar3",
    "container",
    "textInput",
    "typeYourMessage",
    "column",
    "navLink",
    "profile",
    "text",
    "svg",
    "header",
    "h1",
    "content",
    "column2",
    "clickAndPasteMainContent",
    "column3",
    "clickAndPasteSecondaryContent",
    "clickAndPasteMainContent2"
  ],
  mainContent: [
    "mainContent",
    "topbar3",
    "container",
    "textInput",
    "typeYourMessage",
    "column",
    "navLink",
    "profile",
    "text",
    "svg",
    "header",
    "h1",
    "content",
    "column2",
    "clickAndPasteMainContent",
    "column3",
    "clickAndPasteSecondaryContent",
    "clickAndPasteMainContent2"
  ],
  topbar3: [
    "topbar3",
    "container",
    "textInput",
    "typeYourMessage",
    "column",
    "navLink",
    "profile",
    "text",
    "svg"
  ],
  container: [
    "container",
    "textInput",
    "typeYourMessage",
    "column",
    "navLink",
    "profile",
    "text",
    "svg"
  ],
  textInput: ["textInput", "typeYourMessage"],
  typeYourMessage: ["typeYourMessage"],
  column: ["column", "navLink", "profile", "text", "svg"],
  navLink: ["navLink"],
  profile: ["profile", "text", "svg"],
  text: ["text"],
  svg: ["svg"],
  header: ["header", "h1"],
  h1: ["h1"],
  content: [
    "content",
    "column2",
    "clickAndPasteMainContent",
    "column3",
    "clickAndPasteSecondaryContent",
    "clickAndPasteMainContent2"
  ],
  column2: ["column2", "clickAndPasteMainContent"],
  clickAndPasteMainContent: ["clickAndPasteMainContent"],
  column3: [
    "column3",
    "clickAndPasteSecondaryContent",
    "clickAndPasteMainContent2"
  ],
  clickAndPasteSecondaryContent: [
    "clickAndPasteSecondaryContent",
    "clickAndPasteMainContent2"
  ],
  clickAndPasteMainContent2: ["clickAndPasteMainContent2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  eiteHomeLayout: typeof PageLayout;
  section: "section";
  mainContent: "div";
  topbar3: "div";
  container: "div";
  textInput: "div";
  typeYourMessage: "div";
  column: "div";
  navLink: "div";
  profile: "div";
  text: "div";
  svg: "svg";
  header: "div";
  h1: "h1";
  content: "div";
  column2: "div";
  clickAndPasteMainContent: "div";
  column3: "div";
  clickAndPasteSecondaryContent: "div";
  clickAndPasteMainContent2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "oxjwf2M1EC3o9H5JxPQ3KW"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    eiteHomeLayout: makeNodeComponent("eiteHomeLayout"),
    section: makeNodeComponent("section"),
    mainContent: makeNodeComponent("mainContent"),
    topbar3: makeNodeComponent("topbar3"),
    container: makeNodeComponent("container"),
    textInput: makeNodeComponent("textInput"),
    typeYourMessage: makeNodeComponent("typeYourMessage"),
    column: makeNodeComponent("column"),
    navLink: makeNodeComponent("navLink"),
    profile: makeNodeComponent("profile"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    header: makeNodeComponent("header"),
    h1: makeNodeComponent("h1"),
    content: makeNodeComponent("content"),
    column2: makeNodeComponent("column2"),
    clickAndPasteMainContent: makeNodeComponent("clickAndPasteMainContent"),
    column3: makeNodeComponent("column3"),
    clickAndPasteSecondaryContent: makeNodeComponent(
      "clickAndPasteSecondaryContent"
    ),
    clickAndPasteMainContent2: makeNodeComponent("clickAndPasteMainContent2"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
